#!/usr/bin/python

import os
from eagle_automation.config import config
from eagle_automation.export import BadExtension, EaglePNGExport
import sys
import tempfile
from PIL import Image, ImageOps, ImageChops 

def to_png(in_path):

	workdir = tempfile.mkdtemp()

	extension = in_path.split('.')[-1].lower()
	if extension == 'brd':
		layers = config.LAYERS.values()
		out_paths = [	os.path.join(workdir, layer + '.png')
				for layer in config.LAYERS.iterkeys() ]
	elif extension == 'sch':
		layers = [{'layers': ['ALL']}]
		out_paths = [os.path.join(workdir, 'all.png')]
	else:
		os.rmdir(workdir)
		raise BadExtension

	export = EaglePNGExport(workdir=workdir)
	export.export(in_path, layers, out_paths)

	oim = None
	for i, out_path in enumerate(out_paths):
		im = Image.open(out_path).convert("L")
		if oim is None:
			oim = im
		else:
			oim = Image.blend(oim, im, 1.0/(1.0+i))

		os.unlink(out_path)

	os.rmdir(workdir)

	return oim

def usage():
	print """eaglediff, visually compare CadSoft Eagle files
Copyright (C) 2013  Tomaz Solc <tomaz.solc@tablix.org>

USAGE: eaglediff from-file to-file"""
	sys.exit(1)

def main():
	if len(sys.argv) != 3:
		usage()

	try:
		a_im = to_png(sys.argv[1])
	except BadExtension:
		print "%s: skipping, not a board or schematic" % sys.argv[1]
		return

	try:
		b_im = to_png(sys.argv[2])
	except BadExtension:
		print "%s: skipping, not a board or schematic" % sys.argv[2]
		return

	# make the sizes equal
	# if a sheet contains the filename, it is updated with the temporary name
	# and may thus change the size of the image
	width  = max( (a_im.size[0], b_im.size[0]) )
	height = max( (a_im.size[1], b_im.size[1]) )
	a_im2 = Image.new( "L", (width,height) )
	a_im2.paste( a_im, (0,0) )
	a_im = a_im2
	a_im2 = None
	b_im2 = Image.new( "L", (width,height) )
	b_im2.paste( b_im, (0,0) )
	b_im = b_im2
	b_im2 = None

	added = ImageOps.autocontrast(ImageChops.subtract(b_im, a_im), 0)
	deled = ImageOps.autocontrast(ImageChops.subtract(a_im, b_im), 0)
	same = Image.blend(a_im, b_im, 0.5)

	deled = ImageOps.colorize(deled, "#000", "#f00")
	added = ImageOps.colorize(added, "#000", "#00f")
	same = ImageOps.colorize(same, "#000", "#777")

	im = ImageChops.add(ImageChops.add(added, deled), same)

	im.show()

main()
